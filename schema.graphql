# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
}

interface Node {
  id: ID!
}

interface NodeConnection {
  edges: [NodeConnectionEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

interface NodeConnectionEdge {
  next: Node
  node: Node
  previous: Node
}

type ContentfulAsset implements Node {
  belongsTo(
    filter: BelongsToFilterInput,
    limit: Int,
    order: SortOrder = DESC,
    page: Int,
    "Defaults to 25 when page is provided."
    perPage: Int,
    skip: Int = 0,
    sort: [SortArgument!],
    sortBy: String = "date"
  ): NodeBelongsTo
  description: String
  file: ContentfulAsset_File
  id: ID!
  title: String
}

type ContentfulAssetConnection implements NodeConnection {
  edges: [ContentfulAssetEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type ContentfulAssetEdge implements NodeConnectionEdge {
  next: ContentfulAsset
  node: ContentfulAsset
  previous: ContentfulAsset
}

type ContentfulAsset_File {
  contentType: String
  details: ContentfulAsset_File_Details
  fileName: String
  url(
    "Background color for 'contain'"
    background: String,
    "Blur level for base64 string"
    blur: Int,
    "Fit"
    fit: ImageFit = cover,
    "Height"
    height: Int,
    "Quality (default: 75)"
    quality: Int,
    "Width"
    width: Int
  ): Image
}

type ContentfulAsset_File_Details {
  image: ContentfulAsset_File_Details_Image
  size: Int
}

type ContentfulAsset_File_Details_Image {
  height: Int
  width: Int
}

type ContentfulBlogPost implements Node {
  author: ContentfulPerson
  belongsTo(
    filter: BelongsToFilterInput,
    limit: Int,
    order: SortOrder = DESC,
    page: Int,
    "Defaults to 25 when page is provided."
    perPage: Int,
    skip: Int = 0,
    sort: [SortArgument!],
    sortBy: String = "date"
  ): NodeBelongsTo
  body: String
  createdAt(
    "Date format"
    format: String,
    "Locale"
    locale: String
  ): Date
  date(
    "Date format"
    format: String,
    "Locale"
    locale: String
  ): Date
  description: String
  heroImage: ContentfulAsset
  id: ID!
  locale: String
  publishDate(
    "Date format"
    format: String,
    "Locale"
    locale: String
  ): Date
  slug: String
  tags: [String]
  title: String
  updatedAt(
    "Date format"
    format: String,
    "Locale"
    locale: String
  ): Date
}

type ContentfulBlogPostConnection implements NodeConnection {
  edges: [ContentfulBlogPostEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type ContentfulBlogPostEdge implements NodeConnectionEdge {
  next: ContentfulBlogPost
  node: ContentfulBlogPost
  previous: ContentfulBlogPost
}

type ContentfulPageHome implements Node {
  belongsTo(
    filter: BelongsToFilterInput,
    limit: Int,
    order: SortOrder = DESC,
    page: Int,
    "Defaults to 25 when page is provided."
    perPage: Int,
    skip: Int = 0,
    sort: [SortArgument!],
    sortBy: String = "date"
  ): NodeBelongsTo
  createdAt(
    "Date format"
    format: String,
    "Locale"
    locale: String
  ): Date
  date(
    "Date format"
    format: String,
    "Locale"
    locale: String
  ): Date
  heroBlurb: String
  heroHeading: String
  heroSubHeading: String
  id: ID!
  locale: String
  title: String
  updatedAt(
    "Date format"
    format: String,
    "Locale"
    locale: String
  ): Date
}

type ContentfulPageHomeConnection implements NodeConnection {
  edges: [ContentfulPageHomeEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type ContentfulPageHomeEdge implements NodeConnectionEdge {
  next: ContentfulPageHome
  node: ContentfulPageHome
  previous: ContentfulPageHome
}

type ContentfulPerson implements Node {
  belongsTo(
    filter: BelongsToFilterInput,
    limit: Int,
    order: SortOrder = DESC,
    page: Int,
    "Defaults to 25 when page is provided."
    perPage: Int,
    skip: Int = 0,
    sort: [SortArgument!],
    sortBy: String = "date"
  ): NodeBelongsTo
  company: String
  createdAt(
    "Date format"
    format: String,
    "Locale"
    locale: String
  ): Date
  date(
    "Date format"
    format: String,
    "Locale"
    locale: String
  ): Date
  email: String
  facebook: String
  github: String
  id: ID!
  image: ContentfulAsset
  locale: String
  name: String
  phone: String
  shortBio: String
  title: String
  twitter: String
  updatedAt(
    "Date format"
    format: String,
    "Locale"
    locale: String
  ): Date
}

type ContentfulPersonConnection implements NodeConnection {
  edges: [ContentfulPersonEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type ContentfulPersonEdge implements NodeConnectionEdge {
  next: ContentfulPerson
  node: ContentfulPerson
  previous: ContentfulPerson
}

type Metadata {
  pathPrefix: String
  siteDescription: String
  siteName: String
  siteUrl: String
}

type NodeBelongsTo implements NodeConnection {
  edges: [NodeBelongsToEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type NodeBelongsToEdge implements NodeConnectionEdge {
  next: Node
  node: Node
  previous: Node
}

type Page {
  context: JSON!
  path: String!
}

type PageInfo {
  currentPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  isFirst: Boolean!
  isLast: Boolean!
  perPage: Int!
  totalItems: Int!
  totalPages: Int!
}

type Query {
  allContentfulAsset(
    "Filter for ContentfulAsset nodes."
    filter: ContentfulAssetFilterInput,
    limit: Int,
    order: SortOrder = DESC,
    page: Int,
    "Defaults to 25 when page is provided."
    perPage: Int,
    skip: Int = 0,
    sort: [SortArgument],
    sortBy: String = "date"
  ): ContentfulAssetConnection
  allContentfulBlogPost(
    "Filter for ContentfulBlogPost nodes."
    filter: ContentfulBlogPostFilterInput,
    limit: Int,
    order: SortOrder = DESC,
    page: Int,
    "Defaults to 25 when page is provided."
    perPage: Int,
    skip: Int = 0,
    sort: [SortArgument],
    sortBy: String = "date"
  ): ContentfulBlogPostConnection
  allContentfulPageHome(
    "Filter for ContentfulPageHome nodes."
    filter: ContentfulPageHomeFilterInput,
    limit: Int,
    order: SortOrder = DESC,
    page: Int,
    "Defaults to 25 when page is provided."
    perPage: Int,
    skip: Int = 0,
    sort: [SortArgument],
    sortBy: String = "date"
  ): ContentfulPageHomeConnection
  allContentfulPerson(
    "Filter for ContentfulPerson nodes."
    filter: ContentfulPersonFilterInput,
    limit: Int,
    order: SortOrder = DESC,
    page: Int,
    "Defaults to 25 when page is provided."
    perPage: Int,
    skip: Int = 0,
    sort: [SortArgument],
    sortBy: String = "date"
  ): ContentfulPersonConnection
  allPage(
    "Filter pages."
    filter: PageFilterInput
  ): [Page]
  contentfulAsset(
    id: ID,
    "Will return an error if not nullable."
    nullable: Boolean = false,
    path: String
  ): ContentfulAsset
  contentfulBlogPost(
    id: ID,
    "Will return an error if not nullable."
    nullable: Boolean = false,
    path: String
  ): ContentfulBlogPost
  contentfulPageHome(
    id: ID,
    "Will return an error if not nullable."
    nullable: Boolean = false,
    path: String
  ): ContentfulPageHome
  contentfulPerson(
    id: ID,
    "Will return an error if not nullable."
    nullable: Boolean = false,
    path: String
  ): ContentfulPerson
  metaData: Metadata @deprecated(reason : "Use Query.metadata instead.")
  metadata: Metadata
  page(path: String!): Page
}

enum ImageFit {
  "Embed within both provided dimensions."
  contain
  "Crop to cover both provided dimensions."
  cover
  "Ignore the aspect ratio of the input and stretch to both provided dimensions."
  fill
  "Preserving aspect ratio, resize the image to be as large as possible while ensuring its dimensions are less than or equal to both those specified."
  inside
  "Preserving aspect ratio, resize the image to be as small as possible while ensuring its dimensions are greater than or equal to both those specified. Some of these values are based on the object-fit CSS property."
  outside
}

enum SortOrder {
  "Sort ascending"
  ASC
  "Sort descending"
  DESC
}

enum TypeName {
  ContentfulAsset
  ContentfulBlogPost
  ContentfulPageHome
  ContentfulPerson
}

input BelongsToFilterInput {
  id: IDQueryOperatorInput
  path: StringQueryOperatorInput
  typeName: TypeNameQueryOperatorInput
}

input ContentfulAssetFilterInput {
  id: IDQueryOperatorInput
}

input ContentfulAssetInferredQueryOperatorInput {
  "Use the id field instead."
  eq: ID
  id: IDQueryOperatorInput
  "Use the id field instead."
  in: [ID]
  "Use the id field instead."
  ne: ID
  "Use the id field instead."
  nin: [ID]
}

input ContentfulBlogPostFilterInput {
  author: ContentfulPersonInferredQueryOperatorInput
  body: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  date: DateQueryOperatorInput
  description: StringQueryOperatorInput
  heroImage: ContentfulAssetInferredQueryOperatorInput
  id: IDQueryOperatorInput
  locale: StringQueryOperatorInput
  publishDate: DateQueryOperatorInput
  slug: StringQueryOperatorInput
  tags: StringListQueryOperatorInput
  title: StringQueryOperatorInput
  updatedAt: DateQueryOperatorInput
}

input ContentfulPageHomeFilterInput {
  createdAt: DateQueryOperatorInput
  date: DateQueryOperatorInput
  heroBlurb: StringQueryOperatorInput
  heroHeading: StringQueryOperatorInput
  heroSubHeading: StringQueryOperatorInput
  id: IDQueryOperatorInput
  locale: StringQueryOperatorInput
  title: StringQueryOperatorInput
  updatedAt: DateQueryOperatorInput
}

input ContentfulPersonFilterInput {
  id: IDQueryOperatorInput
}

input ContentfulPersonInferredQueryOperatorInput {
  "Use the id field instead."
  eq: ID
  id: IDQueryOperatorInput
  "Use the id field instead."
  in: [ID]
  "Use the id field instead."
  ne: ID
  "Use the id field instead."
  nin: [ID]
}

input DateQueryOperatorInput {
  "Filter by property between provided values."
  between: [Date]
  "Filter by date property equal to provided date value."
  dteq: Date
  "Filter by property of (strict) equality."
  eq: Date
  "Filter by property greater than provided value."
  gt: Date
  "Filter by property greater or equal to provided value."
  gte: Date
  "Filter by property matching any of the provided values."
  in: [Date]
  "Filter by property less than provided value."
  lt: Date
  "Filter by property less than or equal to provided value."
  lte: Date
  "Filter by property not equal to provided value."
  ne: Date
  "Filter by property not matching any of the provided values."
  nin: [Date]
}

input IDQueryOperatorInput {
  "Filter by property of (strict) equality."
  eq: ID
  "Filter by property matching any of the provided values."
  in: [ID]
  "Filter by property not equal to provided value."
  ne: ID
  "Filter by property not matching any of the provided values."
  nin: [ID]
}

input JSONQueryOperatorInput {
  "Filter by property of (strict) equality."
  eq: JSON
  "Filter by property matching any of the provided values."
  in: [JSON]
  "Filter by property not equal to provided value."
  ne: JSON
  "Filter by property not matching any of the provided values."
  nin: [JSON]
  "Filter by property matching provided regular expression."
  regex: String
}

input PageFilterInput {
  context: JSONQueryOperatorInput
  path: StringQueryOperatorInput
}

input SortArgument {
  by: String! = "date"
  order: SortOrder = DESC
}

input StringListQueryOperatorInput {
  "Filter by property containing the provided value."
  contains: [String]
  "Filter by property containing any of the provided values."
  containsAny: [String]
  "Filter by property containing none of the provided values."
  containsNone: [String]
  "Filter which have an array property of specified size."
  size: Int
}

input StringQueryOperatorInput {
  "Filter by property of (strict) equality."
  eq: String
  "Filter by property matching any of the provided values."
  in: [String]
  "Filter by property not equal to provided value."
  ne: String
  "Filter by property not matching any of the provided values."
  nin: [String]
  "Filter by property matching provided regular expression."
  regex: String
}

input TypeNameQueryOperatorInput {
  "Filter by property of (strict) equality."
  eq: TypeName
  "Filter by property matching any of the provided values."
  in: [TypeName]
  "Filter by property not equal to provided value."
  ne: TypeName
  "Filter by property not matching any of the provided values."
  nin: [TypeName]
}


scalar Date

scalar Image

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

scalar File
